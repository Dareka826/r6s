#!/bin/sh
set -eu

## Usage {{{
usage() {
    printf "%s [options] command [command_args...]\n" "${0}"
    printf "\n"
    printf "  commands:\n"
    printf "    init s6                          Run s6-svscan\n"
    printf "    init s6-rc                       Initialize s6-rc live state\n"
    printf "    compile_db SERVICE_DEF_DIR...    Compile a s6-rc database from definitions\n"
    printf "    switch_live_db NEW_DB            Switch which database an s6-rc instance is using\n"
    printf "    change_default_db NEW_DB         Change which database is used for initialization\n"
    printf "    sv list up                       List active services\n"
    printf "    sv list down                     List inactive services\n"
    printf "    sv restart SERVICE               Restart a service\n"
    printf "    rc AGRS...                       Run s6-rc with provided args\n"
    printf "    env add VAR VALUE                Add variable to envdir\n"
    printf "    env del VAR                      Remove variable from envdir\n"
    printf "\n"
    printf "  options:\n"
    printf "    -n        Dry run (print commands instead of executing them)\n"
    printf "\n"
    printf "    init s6:\n"
    printf "      -s SERVICE_DIR        s6-svscan service directory\n"
    printf "      -l LOG_FILE           file to save s6-svscan logs to\n"
    printf "      -e ENV_DIR            envdir for s6-svscan's environment\n"
    printf "\n"
    printf "    init s6-rc:\n"
    printf "      -s SERVICE_DIR        s6-svscan service directory\n"
    printf "      -l LIVE_DIR           s6-rc live directory\n"
    printf "      -d DB_DIR             s6-rc database directory\n"
    printf "\n"
    printf "    compile_db:\n"
    printf "      -d DB_DIR             s6-rc database directory\n"
    printf "\n"
    printf "    switch_live_db:\n"
    printf "      -l LIVE_DIR           s6-rc live directory\n"
    printf "\n"
    printf "    change_default_db:\n"
    printf "      -d DB_DIR             s6-rc database directory\n"
    printf "\n"
    printf "    sv list:\n"
    printf "      -l LIVE_DIR           s6-rc live directory\n"
    printf "\n"
    printf "    sv restart:\n"
    printf "      -s SERVICE_DIR        s6-svscan service directory\n"
    printf "\n"
    printf "    rc:\n"
    printf "      -l LIVE_DIR           s6-rc live directory\n"
    printf "\n"
    printf "    env:\n"
    printf "      -e ENV_DIR            envdir to change\n"
    printf "\n"
}
## }}}

## Utilities {{{
cmdpath() { command -v "${1}"; }
iscmd()   { cmdpath "${1}" >/dev/null 2>&1; }

# Print command if dry run, execute otherwise
execcmd() {
    if [ "${DRY_RUN}" = "1" ]; then
        printf "%s\n" "${*}"
    else
        "${@}"
    fi
}
## }}}

## Preparation {{{
# Ensure commands
ALL_CMD_FOUND="1"
for CMD in s6-svscan s6-envdir s6-rc-init s6-rc-compile s6-rc-update s6-clock s6-rc s6-svc abduco; do
    iscmd "${CMD}" || {
        ALL_CMD_FOUND="0"
        printf "Command not found: %s\n" "${CMD}"
    }
done
[ "${ALL_CMD_FOUND}" = "1" ] || exit 1

# Get absolute command paths (in case of local installation / idk if needed)
    S6_SVSCAN_BIN="$(cmdpath "s6-svscan")"
    S6_ENVDIR_BIN="$(cmdpath "s6-envdir")"
   S6_RC_INIT_BIN="$(cmdpath "s6-rc-init")"
S6_RC_COMPILE_BIN="$(cmdpath "s6-rc-compile")"
 S6_RC_UPDATE_BIN="$(cmdpath "s6-rc-update")"
     S6_CLOCK_BIN="$(cmdpath "s6-clock")"
        S6_RC_BIN="$(cmdpath "s6-rc")"
       S6_SVC_BIN="$(cmdpath "s6-svc")"
       ABDUCO_BIN="$(cmdpath "abduco")"
## }}}

## s6/s6-rc functions {{{
# Run svscan on service dir
s6_init() {
    local SVC_DIR="${1}"
    local LOGFILE="${2}"
    local ENV_DIR="${3}"
    shift 3

    # Ensure service dir
    execcmd install -d -o "${USER}" -g "${USER}" -m 750 "${SVC_DIR}"

    # Run s6-svscan in abduco if not already running
    if ! { "${ABDUCO_BIN}" | tail +2 | sed 's/.*\t//' | grep "^s6-svscan$" >/dev/null 2>&1; }; then
        execcmd "${ABDUCO_BIN}" -n "s6-svscan" \
            sh -c '"${1}" -I "${2}" "${3}" "${4}" 2>&1 | tee "${5}"' '' \
            "${S6_ENVDIR_BIN}" "${ENV_DIR}" \
            "${S6_SVSCAN_BIN}" "${SVC_DIR}" \
            "${LOGFILE}"
    else
        printf "[I]: s6-svscan is already running!\n"
    fi
}

# Initialize s6-rc state
s6rc_init() {
    local SVC_DIR="${1}"
    local LIVE_DIR="${2}"
    local COMPILED_DB="${3}"
    shift 3

    execcmd "${S6_RC_INIT_BIN}" -c "${COMPILED_DB}" -l "${LIVE_DIR}" "${SVC_DIR}"
}

# Compile service dir(s) to db
s6rc_compile_db() {
    local DB_DIR="${1}"
    shift 1

    execcmd "${S6_RC_COMPILE_BIN}" -v2 \
        "${DB_DIR}/compiled-$("${S6_CLOCK_BIN}")" "${@}"
}

# Switch which db s6-rc is using
s6rc_switch_live_db() {
    local LIVE_DIR="${1}"
    local NEW_DB="${2}"
    shift 2

    execcmd "${S6_RC_UPDATE_BIN}" -v2 -l "${LIVE_DIR}" "${NEW_DB}"
}

s6rc_change_default_db() {
    local DB_DIR="${1}"
    local NEW_DB="${2}"
    shift 2

    if [ -e "${DB_DIR}/compiled" ]; then
        [ -h "${DB_DIR}/compiled" ] || \
            { printf "[E]: %s/compiled is not a symlink!" "${DB_DIR}"; exit 1; }

        # Atomic symlink update
        execcmd ln -sf "${NEW_DB}" "${DB_DIR}/compiled/compiled"
        execcmd mv -f "${DB_DIR}/compiled/compiled" "${DB_DIR}/"
    else
        execcmd ln -sf "${NEW_DB}" "${DB_DIR}/compiled"
    fi
}

s6rc_list_up() {
    local LIVE_DIR="${1}"
    shift 1

    execcmd "${S6_RC_BIN}" -l "${LIVE_DIR}" -a list
}

s6rc_list_down() {
    local LIVE_DIR="${1}"
    shift 1

    execcmd "${S6_RC_BIN}" -l "${LIVE_DIR}" -ad list
}

s6_restart_service() {
    local SVC_DIR="${1}"
    local SVC_NAME="${2}"
    shift 2

    [ -d "${SVC_DIR}/${SVC_NAME}" ] || \
        { printf "[E]: %s: No such service in %s!\n" "${SVC_NAME}" "${SVC_DIR}"; exit 1; }

    execcmd "${S6_SVC_BIN}" -r "${SVC_DIR}/${SVC_NAME}"
}

s6rc_passthrough() {
    local LIVE_DIR="${1}"
    shift 1

    execcmd "${S6_RC_BIN}" -l "${LIVE_DIR}" "${@}"
}

s6_env_add() {
    local ENV_DIR="${1}"
    local VAR="${2}"
    local VAL="${3}"
    shift 3

    [ -d "${ENV_DIR}" ] || \
        { printf "[E]: Environment directory doesn't exist!: %s\n" "${ENV_DIR}"; exit 1; }

    if [ "${DRY_RUN}" = "0" ]; then
        printf "%s\n" "${VAL}" >"${ENV_DIR}/${VAR}"
    else
        printf "%s\n" "printf \"%s\n\" \"${VAL}\" >\"${ENV_DIR}/${VAR}\""
    fi
}

s6_env_del() {
    local ENV_DIR="${1}"
    local VAR="${2}"
    shift 2

    [ -d "${ENV_DIR}" ] || \
        { printf "[E]: Environment directory doesn't exist!: %s\n" "${ENV_DIR}"; exit 1; }

    execcmd rm "${ENV_DIR}/${VAR}"
}
## }}}

## Variables {{{
_USER="$(id -u -n)"
 _UID="$(id -u)"
_HOME="$(homeof "${_USER}")"
_TMPDIR="${TMPDIR:-/tmp}"

var_gen_s6_service_dir() {
    [ "${_UID}" = "0" ] \
        && printf "%s" "/run/service" \
        || printf "%s" "${_TMPDIR}/s6-service-${_UID}"
}

var_gen_s6_rc_live_dir() {
    [ "${_UID}" = "0" ] \
        && printf "%s" "/run/s6-rc" \
        || printf "%s" "${_TMPDIR}/s6-rc-${_UID}"
}

var_gen_s6_env_dir() {
    [ "${_UID}" = "0" ] \
        && printf "%s" "/etc/s6/env.d" \
        || printf "%s" "${_HOME}/.local/share/s6/env.d"
}

var_gen_s6_rc_sv_dir() {
    [ "${_UID}" = "0" ] \
        && printf "%s" "/etc/s6/sv" \
        || printf "%s" "${_HOME}/.local/share/s6/sv"
}

var_gen_s6_rc_db_dir() {
    [ "${_UID}" = "0" ] \
        && printf "%s" "/etc/s6/rc" \
        || printf "%s" "${_HOME}/.local/share/s6/rc"
}

var_gen_s6_logfile() {
    [ "${_UID}" = "0" ] \
        && printf "%s" "/var/log/s6.log" \
        || printf "%s" "/tmp/s6-${_UID}.log"
}
## }}}

## Commands {{{

cmd_init() {
    [ "${#}" -ge 1 ] || { usage; exit 1; }
    [ -n "${OPT_S}" ] || OPT_S="$(var_gen_s6_service_dir)"

    if [ "${1}" = "s6" ]; then
        [ -n "${OPT_L}" ] || OPT_L="$(var_gen_s6_logfile)"
        [ -n "${OPT_E}" ] || OPT_E="$(var_gen_s6_env_dir)"

        s6_init "${OPT_S}" "${OPT_L}" "${OPT_E}"
    elif [ "${1}" = "s6-rc" ]; then
        [ -n "${OPT_L}" ] || OPT_L="$(var_gen_s6_rc_live_dir)"
        [ -n "${OPT_D}" ] || OPT_D="$(var_gen_s6_rc_db_dir)"

        s6rc_init "${OPT_S}" "${OPT_L}" "${OPT_D}/compiled"
    else
        usage
        exit 1
    fi
}

cmd_compile_db() {
    [ -n "${*}" ] || { usage; exit 1; }
    [ -n "${OPT_D}" ] || OPT_D="$(var_gen_s6_rc_db_dir)"

    s6rc_compile_db "${OPT_D}" "${@}"
}

cmd_switch_live_db() {
    [ "${#}" -ge 1 ] || { usage; exit 1; }
    [ -n "${OPT_L}" ] || OPT_L="$(var_gen_s6_rc_live_dir)"

    s6rc_switch_live_db "${OPT_L}" "${1}"
}

cmd_change_default_db() {
    [ "${#}" -ge 1 ] || { usage; exit 1; }
    [ -n "${OPT_D}" ] || OPT_D="$(var_gen_s6_rc_db_dir)"

    s6rc_change_default_db "${OPT_D}" "${1}"
}

cmd_sv() {
    [ "${#}" -ge 1 ] || { usage; exit 1; }

    if [ "${1}" = "list" ]; then
        [ "${#}" -ge 2 ] || { usage; exit 1; }
        [ -n "${OPT_L}" ] || OPT_L="$(var_gen_s6_rc_live_dir)"

        if [ "${2}" = "up" ]; then
            s6rc_list_up "${OPT_L}"
        elif [ "${2}" = "down" ]; then
            s6rc_list_down "${OPT_L}"
        else
            usage
            exit 1
        fi

    elif [ "${1}" = "restart" ]; then
        [ "${#}" -ge 2 ] || { usage; exit 1; }
        [ -n "${OPT_S}" ] || OPT_S="$(var_gen_s6_service_dir)"

        s6_restart_service "${OPT_S}" "${2}"
    else
        usage
        exit 1
    fi
}

cmd_rc() {
    [ "${#}" -ge 1 ] || { usage; exit 1; }
    [ -n "${OPT_L}" ] || OPT_L="$(var_gen_s6_rc_live_dir)"

    s6rc_passthrough "${OPT_L}" "${@}"
}

cmd_env() {
    [ "${#}" -ge 1 ] || { usage; exit 1; }
    [ -n "${OPT_E}" ] || OPT_E="$(var_gen_s6_env_dir)"

    if [ "${1}" = "add" ]; then
        [ "${#}" -ge 3 ] || { usage; exit 1; }

        s6_env_add "${OPT_E}" "${2}" "${3}"
    elif [ "${1}" = "del" ]; then
        [ "${#}" -ge 2 ] || { usage; exit 1; }

        s6_env_del "${OPT_E}" "${2}"
    fi
}

## }}}

## MAIN {{{

# Check if any args present
[ "${#}" -gt 0 ] || { usage; exit 0; }

# Default options
DRY_RUN="0"
OPT_D=""
OPT_E=""
OPT_L=""
OPT_S=""

# Parse option args
while [ "${#}" -gt 0 ]; do
    case "${1}" in

        "-n") DRY_RUN="1"
              shift 1
              ;;

        "-d") [ "${#}" -ge 2 ] || exit 1
              OPT_D="${2}"
              shift 2
              ;;

        "-e") [ "${#}" -ge 2 ] || exit 1
              OPT_E="${2}"
              shift 2
              ;;

        "-l") [ "${#}" -ge 2 ] || exit 1
              OPT_L="${2}"
              shift 2
              ;;

        "-s") [ "${#}" -ge 2 ] || exit 1
              OPT_S="${2}"
              shift 2
              ;;

           *) break ;;
    esac
done

# Check if any command specified
[ "${#}" -gt 0 ] || { usage; exit 1; }

# Decide what to do
CMDNAME="${1}"
if iscmd "cmd_${CMDNAME}"; then
    shift 1
    "cmd_${CMDNAME}" "${@}"
else
    printf "[E]: No such command: %s\n" "${CMDNAME}"
    usage
    exit 1
fi

## }}}
