#!/bin/sh
set -eu

## Utilities {{{
cmdpath() { command -v "${1}"; }
iscmd()   { cmdpath "${1}" >/dev/null 2>&1; }

# Print command if dry run, execute otherwise
execcmd() {
    if [ "${DRY_RUN}" = "1" ]; then
        printf "%s\n" "$*"
    else
        "$@"
    fi
}
## }}}

## Preparation {{{
# Ensure commands
ALL_CMD_FOUND="1"
for CMD in s6-svscan s6-envdir s6-rc-init s6-rc-compile s6-rc-update s6-clock abduco; do
    iscmd "${CMD}" || {
        ALL_CMD_FOUND="0"
        printf "Command not found: %s\n" "${CMD}"
    }
done
[ "${ALL_CMD_FOUND}" = "1" ] || exit 1

# Get absolute command paths (in case of local installation / idk if needed)
    S6_SVSCAN_BIN="$(cmdpath "s6-svscan")"
    S6_ENVDIR_BIN="$(cmdpath "s6-envdir")"
   S6_RC_INIT_BIN="$(cmdpath "s6-rc-init")"
S6_RC_COMPILE_BIN="$(cmdpath "s6-rc-compile")"
 S6_RC_UPDATE_BIN="$(cmdpath "s6-rc-update")"
     S6_CLOCK_BIN="$(cmdpath "s6-clock")"
       ABDUCO_BIN="$(cmdpath "abduco")"
## }}}

# Run svscan on service dir
s6_init() {
    # Ensure service dir
    execcmd install -d -o "${USER}" -g "${USER}" -m 750 "${S6_SERVICE_DIR}"

    # Run s6-svscan in abduco if not already running
    if ! { "${ABDUCO_BIN}" | tail +2 | sed 's/.*\t//' | grep "^s6-svscan$" >/dev/null 2>&1; }; then
        execcmd "${ABDUCO_BIN}" -n s6-svscan \
            "${S6_ENVDIR_BIN}" -I "${S6_RC_ENV_DIR}" \
                "${S6_SVSCAN_BIN}" "${S6_SERVICE_DIR}"
    fi
}

# Initialize s6-rc state
s6rc_init() {
    execcmd "${S6_RC_INIT_BIN}" -c "${S6_RC_DB_DIR}/compiled" -l "${S6_RC_LIVE_DIR}" "${S6_SERVICE_DIR}"
}

# Compile service dir to db
s6rc_compile_db() {
    local COMPILED_DB="${S6_RC_DB_DIR}/compiled-$("${S6_CLOCK_BIN}")"
    execcmd "${S6_RC_COMPILE_BIN}" -v2 "${COMPILED_DB}" "${S6_RC_SV_DIR}"
}

# Fetch name of newest db
s6rc_newest_db() {
    find "${S6_RC_DB_DIR}" -maxdepth 1 -type d -name compiled\* \
        | sort | tail -1
}

# Update live db to the newest one
s6rc_update_live_db() {
    local NEW_DB="$(s6rc_newest_db)"
    execcmd "${S6_RC_UPDATE_BIN}" -v2 -l "${S6_RC_LIVE_DIR}" "${NEW_DB}"

    # Atomic symlink update
    execcmd ln -sf "${NEW_DB##*/}" "${S6_RC_DB_DIR}/compiled/compiled"
    execcmd mv -f "${S6_RC_DB_DIR}/compiled/compiled" "${S6_RC_DB_DIR}/"
}

usage() {
    printf "%s [options] command\n" "${0}"
    printf "\n"
    printf "  options:\n"
    printf "    -n                dry run\n"
    printf "\n"
    printf "  commands:\n"
    printf "    init_s6           Runs s6-svscan in abduco\n"
    printf "    init_s6-rc        Initializes s6-rc state\n"
    printf "    compile_db        Compiles a new db from the service definitions\n"
    printf "    update_live_db    Updates the db that s6-rc is using to the newest one\n"
}

## Variables {{{
_USER="$(id -u -n)"
 _UID="$(id -u)"
_HOME="$(homeof "${_USER}")"

if [ "${_UID}" = "0" ]; then
    # Root user, global s6 installation
    S6_SERVICE_DIR="/run/service"
    S6_RC_LIVE_DIR="/run/s6-rc"

    # TODO: Handle multiple SV dirs (like on Artix)
    S6_RC_SV_DIR="/etc/s6/sv"
    S6_RC_DB_DIR="/etc/s6/rc"
    S6_RC_ENV_DIR=""
else
    # User-local s6
    S6_SERVICE_DIR="/tmp/s6-service-${_UID}"
    S6_RC_LIVE_DIR="/tmp/s6-rc-${_UID}"

     S6_RC_SV_DIR="${_HOME}/.local/share/s6/sv"
     S6_RC_DB_DIR="${_HOME}/.local/share/s6/rc"
    S6_RC_ENV_DIR="${_HOME}/.local/share/s6/env.d"

    XDG_RUNTIME_DIR="/run/user/${_UID}"
    DBUS_SESSION_BUS_ADDRESS="unix:abstract=/${_UID}/dbus"
fi
## }}}

## MAIN {{{
# Default parameters
DRY_RUN="0"

# Parse option args
while [ "${#}" -gt 0 ]; do
    case "${1}" in
        "-n") DRY_RUN="1"; shift 1 ;;
           *) break ;;
    esac
done

# Parse command args
[ "${#}" -gt 0 ] || { usage; exit 0; }
while [ "${#}" -gt 0 ]; do
    case "${1}" in
               "init_s6") s6_init ; shift 1 ;;
            "init_s6-rc") s6rc_init ; shift 1 ;;
            "compile_db") s6rc_compile_db ; shift 1 ;;
        "update_live_db") s6rc_update_live_db ; shift 1 ;;
                       *) usage ; exit 0 ;;
    esac
done
## }}}
